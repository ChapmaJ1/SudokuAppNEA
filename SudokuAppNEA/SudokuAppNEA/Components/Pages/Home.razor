@page "/"
@inject NavigationManager NavigationManager
@inject UserClient UserClient

<PageTitle>Home</PageTitle>

<h1>Welcome!</h1>
<h2>@_message</h2>

<EditForm Model="@_user" FormName="Login" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div class="form-container">
        <div>
            <label class="form-label" for="username">Username:</label> 
            <InputText id="username" @bind-Value="_user!.Username" class="form-control" />
        </div>
        <div>
            <label class="form-label" for="password">Password:</label>
            <InputText id="password" @bind-Value="_user.Password" type="password" class="form-control" />
        </div>
        <button class="btn-primary" type="submit" style="margin-top: 50px;">Submit</button>
        <button class="btn-primary" @onclick=CreateAccount>Create Account</button>
    </div>
</EditForm>

@code
{
    [SupplyParameterFromForm]
    private User? _user { get; set; } = new User();
    private string? _message;
    private DBCallerUser _databaseCallerUser = new DBCallerUser();
    private DBCallerSettings _databaseCallerSettings = new DBCallerSettings();

    protected override void OnInitialized()
    {
        UserClient!.InitialiseClient();
        Task.Run(() => GetApiBoards());
    }  

    private async Task GetApiBoards()
    {
        bool fetched = false;
        // catches exceptions in case of the API call failing for any reason
        while (fetched == false)
        {
            try
            {
                BoardGeneratorAPI generator = new();
                // fetches board from API in the background, while the user is logging in
                // boards are continuously fetched until at least one board of each difficulty is stored
                while (UserClient.EasyFetched == 0 || UserClient.MediumFetched == 0 || UserClient.HardFetched == 0)
                {
                    List<Board> fetchedBoards = await generator.GenerateBoard();
                    // 10 boards fetched to minimise the number of fetches needed, while also preventing individual fetches from taking too long
                    for (int i = 0; i < 10; i++)
                    {
                        UserClient.IncrementDifficultiesFetched(fetchedBoards[i].Difficulty);
                        UserClient!.FetchedBoards!.Add(fetchedBoards[i]);
                    }
                }
                fetched = true;
            }
            catch (Exception)
            {
                await Task.Delay(1000);
            }
        }
    }

    private void HandleSubmit()
    {
        // finds the user in the database if a record with matching details exists
        int userId = _databaseCallerUser.FindUser(_user!.Username, _user.Password);
        UserClient.SetUser(_user!);
        // if a matching user is found
        if (userId != 0)
        {
            // binds user details to the injected UserClient service
            _user.SetId(userId);
            // fetches the settings of the given user from the database
            GetUserSettings();
            NavigationManager.NavigateTo($"/menu");
        }
        // if a matching user is not found
        else
        {
            _message = "Invalid Login Provided";
        }
    }

    private void GetUserSettings()
    {
        // fetches settings + binds them accordingly to the service
        (string, string) settingsData = _databaseCallerSettings.GetUserSettings(UserClient.User!.Id);
        UserClient.SetMistakeDetection(settingsData.Item1);
        UserClient.SetSaveScores(settingsData.Item2);
    }

    private void CreateAccount()
    {
        NavigationManager.NavigateTo($"/account");
    }
}
