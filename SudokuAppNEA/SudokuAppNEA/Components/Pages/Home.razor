@page "/"
@inject NavigationManager NavigationManager
@inject UserClient UserClient

<PageTitle>Home</PageTitle>

<h1>Welcome!</h1>
<h2>@_message</h2>

<EditForm Model="@_user" FormName="Login" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div class="form-container">
        <div>
            <label class="form-label" for="username">Username:</label> 
            <InputText id="username" @bind-Value="_user!.Username" class="form-control" />
        </div>
        <div>
            <label class="form-label" for="password">Password:</label>
            <InputText id="password" @bind-Value="_user.Password" type="password" class="form-control" />
        </div>
        <button class="btn-primary" type="submit" style="margin-top: 50px;">Submit</button>
        <button class="btn-primary" @onclick=CreateAccount>Create Account</button>
    </div>
</EditForm>

@code
{
    [SupplyParameterFromForm]
    private User? _user { get; set; } = new User();
    private string? _message;
    private DBCallerUser _databaseCallerUser = new DBCallerUser();
    private DBCallerSettings _databaseCallerSettings = new DBCallerSettings();

    protected override void OnInitialized()
    {
        UserClient!.InitialiseClient();
        Task.Run(() => GetApiBoards());
    }  

    private async Task GetApiBoards()
    {
        BoardGeneratorAPI generator = new();
        while (UserClient.EasyFetched == 0 || UserClient.MediumFetched == 0 || UserClient.HardFetched == 0)
        {
            List<Board> fetchedBoards = await generator.GenerateBoard();  // fetch board from API
            for (int i = 0; i < 10; i++)  // 10 boards fetched to minimise the number of fetches needed, while also preventing fetching from taking too long
            {
                UserClient.IncrementDifficultiesFetched(fetchedBoards[i].Difficulty);
                UserClient!.FetchedBoards!.Add(fetchedBoards[i]);
            }
        }
    }

    private void HandleSubmit()
    {
        UserClient.SetUser(_user!);
        int userId = _databaseCallerUser.FindUser(_user!.Username, _user.Password);  // find user in database if record exists, otherwise add a new user
        if (userId != 0)
        {
            _user.SetId(userId);
            _databaseCallerUser.AddSession(userId);
            _user.SetSessionId(_databaseCallerUser.GetTableCount("sessions"));
            GetUserSettings();
            NavigationManager.NavigateTo($"/menu");
        }
        else
        {
            _message = "Invalid Login Provided";
        }
    }

    private void GetUserSettings()
    {
        (string, string) settingsData = _databaseCallerSettings.GetUserSettings(UserClient.User!.Id);
        UserClient.SetMistakeDetection(settingsData.Item1);
        UserClient.SetSaveScores(settingsData.Item2);
    }

    private void CreateAccount()
    {
        NavigationManager.NavigateTo($"/account");
    }
}
