@page "/"
@inject NavigationManager NavigationManager
@inject UserClient UserClient
@inject DBCaller DatabaseCaller

<PageTitle>Home</PageTitle>

<h1>Welcome!</h1>
<h2>@message</h2>

<EditForm Model="@user" FormName="Login" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div class="form-container">
        <div>
            <label class="form-label" for="username">Username:</label> 
            <InputText id="username" @bind-Value="user!.Username" class="form-control" />
        </div>
        <div>
            <label class="form-label" for="password">Password:</label>
            <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
        </div>
        <button class="btn-primary" type="submit" style="margin-top: 50px;">Submit</button>
        <button class="btn-primary" @onclick=CreateAccount>Create Account</button>
    </div>
</EditForm>

@code
{
    [SupplyParameterFromForm]
    private User? user { get; set; } = new User();
    private string? message;

    private void HandleSubmit()
    {
        UserClient.User = user!;
        int userId = DatabaseCaller.FindUser(user!.Username, user.Password);  // find user in database if record exists, otherwise add a new user
        if (userId != 0)
        {
            UserClient.User!.Id = userId;  // user ID
            GetUserSettings();
            NavigationManager.NavigateTo($"/menu");
        }
        else
        {
            message = "Invalid Login Provided";
        }
    }

    private void GetUserSettings()
    {
        (string, string) settingsData = DatabaseCaller.GetUserSettings(UserClient.User!.Id);
        UserClient.MistakeDetection = settingsData.Item1;
        UserClient.SaveScores = settingsData.Item2;
    }

    private void CreateAccount()
    {
        NavigationManager.NavigateTo($"/account");
    }
}
