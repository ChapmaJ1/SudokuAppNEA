@page "/game/{difficulty}"

<h1>Game</h1>

@if (board == null)
{
    <h1 style="margin-top: 100px">Loading...</h1>
}
else
{
<div class="sudoku-container" ADDCSS>
    @for (int column = 0; column < 9; column++)
    {
        <div class="sudoku-row">
            @for (int row = 0; row < 9; row++)
            {
                <button class="sudoku-cell" @onclick="() => {OnCellSelected(row, column); StateHasChanged();}">@DisplayCell(column, row)</button>
            }
        </div>
    }
</div>
<div class="number-buttons-container">
    @for (int i = 1; i < 10; i++)
    {
        <button class="button-cell" @onclick="() => {ChangeCellValue(i, () => StateHasChanged());}">@i</button>
    }
</div>
}

@code {
    [Parameter]
    public string? difficulty {get; set;}
    public Cell? selectedCell;
    public Board? board { get; set; }
    public ForwardChecker? solver { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await InitialiseBoardAndSolver();
    }

    private async Task InitialiseBoardAndSolver()
    {
        BoardGeneratorAPI generator = new BoardGeneratorAPI();
        ResponseData responseData = await generator.GenerateBoard();
        board = generator.ConvertToBoard(responseData);
        board.InitialiseGraph();
        HeapPriorityQueue queue = new HeapPriorityQueue(board.VariableNodes, 9);
        foreach (Cell node in board.VariableNodes)
        {
            queue.Enqueue(node);
        }
        solver = new ForwardChecker(board, board.VariableNodes, queue);
    }

    public int DisplayCell(int column, int row)
    {
        foreach (Cell cell in board!.AdjacencyList.Keys)
        {
            if (cell.Position.Item1 == column && cell.Position.Item2 == row)
            {
                return cell.Entry;
            }
        }
        throw new InvalidOperationException("Cell does not exist");
    }

    public void OnCellSelected(int column, int row)
    {
        foreach (Cell cell in board!.VariableNodes)
        {
            if (cell.Position.Item1 == column && cell.Position.Item2 == row)
            {
                selectedCell = cell;
            }
        }
    }

    public void ChangeCellValue(int number, Action refresh)
    {
        selectedCell!.Entry = number;
        
    }
}
