@page "/game/{difficulty}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject UserClient UserClient
@inherits GameWrapper

<h1>Game</h1>

@if (board == null)
{
    <h1 style="margin-top: 100px">Loading...</h1>
}
else
{
    <h3 style="margin-left: 100px">Time: @FormatTime()</h3>   // time since user started board
    @if (UserClient.MistakeDetection == "On")
    {
        <h3 style="margin-left: 100px">Mistakes: @mistakeCount</h3>
    }
    <h3 style="margin-left: 100px">Hints: @hintCount</h3>
    CheckBoard();
    @if (userCompleted == true)
    {
        <h3>Board Completed!          Your Score: @GenerateScore(difficulty!)</h3>
    }
    <div class="sudoku-container-@containerType">
        @for (int row = 0; row < dimensions; row++)  // prints 81 square buttons in a 9x9 format
        {
            <div class="sudoku-column">
                @for (int column = 0; column < dimensions; column++)
                {
                    int columnTemp = column; // if row and column directly used, OnSelected(9,9) would be called
                    int rowTemp = row;   // for all cells as the loop would have finished by the time of user interaction
                    string backgroundColour = "white";
                    @if (UserClient.MistakeDetection == "On")
                    {
                        backgroundColour = GetBackgroundColour(rowTemp, columnTemp);
                    }
                    <button class="sudoku-cell-@cellType" style="background-color: @backgroundColour" @onclick="() => OnCellSelected(rowTemp, columnTemp)">@DisplayCell(rowTemp, columnTemp)</button>
                }
            </div>
        }
    </div>

    <div class="game-btn-container-left-@containerType">
        <button class="btn-primary" @onclick=SolveBoard>Solve Board</button>
        <button class="btn-primary" @onclick=CheckBoard>Check Board</button>
        <button class="btn-primary" @onclick=SaveBoard>Save + Menu</button>
    </div>

    <div class="game-btn-container-right-@containerType">
        <button class="btn-primary" @onclick=Reset>Reset Board</button>
        <button class="btn-primary" @onclick=GetHint>Get Hint</button>
        <button class="btn-primary" @onclick=Undo>Undo</button>
        <button class="btn-primary" @onclick=ChangeNotesFunctionality>Notes: @noteTaking</button>
    </div>

    <div class="number-buttons-container-@containerType">
        @for (int i = 1; i <= dimensions; i++)  // prints dimensions numbered input buttons in a line
        {
            int temp = i; // if i directly used, ChangeCellValue(dimensions + 1) would be called for all button clicks
            <button class="button-cell-@buttonType" @onclick="() => ChangeCellValue(temp)">@i</button>
        }
        <button class="button-cell-@buttonType" style="font-size: 25px" @onclick="() => EraseValue()">Erase</button>
    </div>
}

@code {
    [Parameter]
    public string? difficulty {get; set;}
    private int dimensions;
    private string? containerType;
    private string? cellType;
    private string? buttonType;
    private Cell? selectedCell;
    private Board? board;
    private ForwardChecker? solver;
    private int[,]? correctNumbers;
    private bool solved;
    private bool userCompleted = false;
    private DateTime launchTime;
    private int minuteDelay = 0;
    private int secondDelay = 0;
    private int mistakeCount;
    private int hintCount;
    private string noteTaking = "Off";
    private MoveStack stack = new MoveStack(100);
    private DBCaller DatabaseCaller = new();
    private GameWrapper? GameWrapper;

    protected override async Task OnInitializedAsync()
    {
        if (difficulty != "continue")
        {
            GetDifficulty();
        }
        await InitialiseBoardAndSolver();  // asynchronous method for API call
        SetFrontendValues();
        GameWrapper = new GameWrapper(board!, correctNumbers!);
        launchTime = DateTime.Now.Add(new TimeSpan(0, minuteDelay, secondDelay));
        while (solved == false)  // re-render the page every second while the board is not solved
        {                        // this is required to update the timer to reflect real-time
            await Task.Delay(1000);
            StateHasChanged();
        }
    }

    private async Task InitialiseBoardAndSolver()
    {
        if (dimensions == 9)
        {
            bool boardFetched = false;
            while (boardFetched == false)
            {
                try
                {
                    await GetBoard();
                    boardFetched = true;
                }
                catch (Exception)
                {
                    NavigateToMenu();
                }
            }
        }
        else if (difficulty == "continue")
        {
            string[,] boardSketch = LoadSavedBoard();
            board = new Board(difficulty, boardSketch, dimensions);
        }
        else
        {
            string[,] boardSketch = new string[dimensions, dimensions];
            for (int i = 0; i < dimensions; i++)
            {
                for (int j = 0; j < dimensions; j++)
                {
                    boardSketch[i, j] = "0v";
                }
            }
            board = new Board(difficulty, boardSketch, dimensions);
        }
        board!.InitialiseGraph();
        RecordVariableNodesWithValues();
        MakeUniqueSolution(board);
        solver = new ForwardChecker(board);
        board.InitialiseQueue();  // initialise the board ready for solving
        correctNumbers = new int[dimensions, dimensions];
        InitialiseCorrectNumbers();
        RevertVariableNodesWithValues();
        solved = false;
    }

    private void SaveBoard()
    {
        if (!solved)
        {
            string path = "SavedBoard.txt";
            string[,] boardContents = new string[dimensions, dimensions];
            int counter = 0;
            foreach (Cell cell in board!.AdjacencyList.Keys)  // can do this as adjacency list is created in order of cell position
            {
                string saveData = "";
                saveData += cell.Entry.ToString();
                if (board.VariableNodes.Contains(cell))
                {
                    saveData += "v";
                }
                boardContents[counter / dimensions, counter % dimensions] = saveData;
                counter++;
            }
            File.WriteAllText(path, string.Empty);   // clears all text from the file
            using (StreamWriter streamWriter = new StreamWriter(path))
            {
                for (int i = 0; i < dimensions; i++)
                {
                    for (int j = 0; j < dimensions; j++)
                    {
                        streamWriter.Write(boardContents[i, j] + " ");
                    }
                    streamWriter.Write("\n");
                }
                streamWriter.WriteLine(difficulty);
                streamWriter.WriteLine(FormatTime());
                streamWriter.WriteLine(mistakeCount);
                streamWriter.Write(hintCount);
            }
        }
        NavigateToMenu();
    }

    private string[,] LoadSavedBoard()
    {
        string path = "SavedBoard.txt";
        int counter = 0;
        List<string[]> cellList = new();
        using (StreamReader streamReader = new StreamReader(path))
        {
            while (!streamReader.EndOfStream)
            {
                string line = streamReader.ReadLine() ?? string.Empty;
                string[] cells = line.Split(" ");
                cellList.Add(cells);
                counter++;
            }
        }
        string[,] boardSketch = new string[counter - 4, counter - 4];
        for (int i = 0; i < counter - 4; i++)
        {
            for (int j = 0; j < counter - 4; j++)
            {
                boardSketch[i, j] = cellList[i][j];
            }
        }
        difficulty = cellList[counter - 4][0];
        dimensions = counter - 4;
        string[] timeDelay = cellList[counter - 3][0].Split(':');
        minuteDelay = -1 * Convert.ToInt32(timeDelay[0]);
        secondDelay = -1 * Convert.ToInt32(timeDelay[1]);
        mistakeCount = Convert.ToInt32(cellList[counter - 2][0]);
        hintCount = Convert.ToInt32(cellList[counter - 1][0]);
        return boardSketch;
    }

    private void RecordVariableNodesWithValues()   // stores values of non-zero variable nodes in case of a continued/stored game
    {
        foreach (Cell cell in board!.VariableNodes)
        {
            if (cell.Entry != 0)
            {
                stack!.Push(new Move(cell, cell.Entry));
                cell.ChangeCellValue(0);
            }
        }
    }

    private void RevertVariableNodesWithValues()
    {
        while (stack.Count > 0)
        {
            Move move = stack.Pop();
            move.Cell.ChangeCellValue(move.OldEntry);
        }
    }

    private async Task GetBoard()
    {
        bool generated = false;
        BoardGeneratorAPI generator = new BoardGeneratorAPI();    // SAVE UNUSED BOARDS TO LIST FOR POTENTIAL LATER USE
        foreach (Board savedBoard in UserClient!.FetchedBoards)
        {
            if (savedBoard.Difficulty == difficulty)
            {
                board = savedBoard;
                UserClient!.FetchedBoards.Remove(savedBoard);
                generated = true;
                break;
            }
        }
        while (generated == false)
        {
            List<Board> fetchedBoards = await generator.GenerateBoard();  // fetch board from API
            bool found = false;
            for (int i = 0; i < 10; i++)  // 10 boards fetched to minimise the number of fetches needed, while also preventing fetching from taking too long
            {
                if (fetchedBoards[i].Difficulty == difficulty && found == false)
                {
                    board = fetchedBoards[i];    // no way of fetching board from API by difficulty, so this is checking whether
                    generated = true;                                   // the difficulty of the fetched board matches the desired difficulty
                    found = true;
                }
                else
                {
                    UserClient!.FetchedBoards.Add(fetchedBoards[i]);
                }
            }
        }
    }

    private void GetDifficulty()
    {
        if (difficulty == "16" || difficulty == "25")
        {
            dimensions = Convert.ToInt32(difficulty);
        }
        else
        {
            dimensions = 9;
            if (difficulty == "Adaptive")  // get recommended difficulty from database if required, otherwise use the chosen difficulty
            {
                difficulty = DatabaseCaller.GetRecommendedDifficulty(UserClient.User!.Id);
            }
        }
    }

    private void MakeUniqueSolution(Board board)
    {
        IBoardGenerator generator;
        if (dimensions == 9)
        {
            generator = new BoardGeneratorAPI();
        }
        else
        {
            generator = new UniqueBoardGenerator();
        }
        generator.GenerateUniqueSolution(dimensions, board);
        board.InitialiseRemainingNumbers(board.GetFixedNodes());  // initialises unique board
    }


    private void InitialiseCorrectNumbers()
    {
        for (int i = 0; i < dimensions; i++)  // for constant time access later on
        {
            for (int j = 0; j < dimensions; j++)
            {
                correctNumbers![i, j] = Convert.ToInt32(board!.Solutions[0].BoardSketch[i, j]);  // set correct numbers
            }
        }
        board!.Reset();  // resets the board so that it is rendered in its initial state for the user
    }

    private void SetFrontendValues()
    {
        if (dimensions == 9)
        {
            containerType = "default";
            cellType = "default";
            buttonType = "default";
        }
        else
        {
            containerType = "large";
            buttonType = "large";
            if (dimensions == 16)
            {
                cellType = "medium";
            }
            else
            {
                cellType = "large";
            }
        }
    }

    private void OnCellSelected(int row, int column)   // also change to array method?
    {
        if (!solved)
        {
            selectedCell = GameWrapper!.OnCellSelected(row, column);
        }
    }

    private string DisplayCell(int row, int column)    // change to array method for linear time rendering?
    {
        return GameWrapper!.DisplayCell(row, column);
    }

    private void ChangeCellValue(int number)
    {
        if (selectedCell != null)
        {
            if (!solved)
            {
                mistakeCount += GameWrapper!.ChangeCellValue(number, stack, selectedCell!, noteTaking);
            }
        }
    }

    private string GetBackgroundColour(int row, int column)
    {
        return GameWrapper!.GetBackgroundColour(row, column);
    }

    private void CheckBoard()
    {
        if (solver!.CheckInvalidFull() == false && solver!.CheckFinished() == true && solved == false)  // change invalid to use correctnumbers array
        {  // if board has been solved + not been solved in previous renders
            userCompleted = true;
            solved = true;
            if (UserClient.SaveScores == "On")  // if the user's settings indicate that the score should be saved to the database
            {
                UserClient.AddEntry(GenerateScore(difficulty!), difficulty!, mistakeCount, FormatTime());
                DatabaseCaller.AddEntry(UserClient.Entry!);  // creates a new record for the board entry + adds it to the database
            }
        }
    }

    private int GenerateScore(string difficulty)
    {
        TimeSpan completionTime = DateTime.Now - launchTime;
        int timeScoreSubtraction = (completionTime.Minutes * 60 + completionTime.Seconds);  // 1 score subtracted per second
        int mistakeScoreSubtraction = mistakeCount * 100;  // 100 score subtracted per mistake
        int hintScoreSubtraction = hintCount * 150;  // 150 score subtracted per hint
        int difficultyBonus = 0;
        if (difficulty == "Medium")
        {
            difficultyBonus = 500;
        }
        else if (difficulty == "Hard")
        {
            difficultyBonus = 1000;
        }
        int score = 5000 - timeScoreSubtraction - mistakeScoreSubtraction - hintScoreSubtraction + difficultyBonus;  // score calculation, from an initial score of 5000
        if (score < 0)
        {
            return 0;  // negative scores brought up to 0
        }
        return score;
    }

    private string FormatTime()
    {
        return GameWrapper!.FormatTime(launchTime);
    }

    private void EraseValue()
    {
        if (!solved)
        {
            selectedCell!.ChangeCellValue(0); 
        }
    }

    private void SolveBoard()
    {
        if (!solved)
        {
            GameWrapper!.SolveBoard();
        }
        solved = true;
    }

    private void Reset()
    {
        if (!solved)
        {
            board!.Reset();
        }
    }

    private void GetHint()
    {
        if (!solved)
        {
            hintCount++;
            GameWrapper!.GetHint();
        }
    }

    private void ChangeNotesFunctionality()  // changes frontend display + functionality when changing cell values
    {
        noteTaking = GameWrapper!.ChangeNotesFunctionality(noteTaking);
    }

    private void Undo()
    {
        GameWrapper!.Undo(stack);
    }

    private void NavigateToMenu()
    {
        NavigationManager.NavigateTo("/menu");
    }
}