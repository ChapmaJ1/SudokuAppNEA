@page "/game/{difficulty}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject UserClient UserClient

<h1>Game</h1>

@if (_invalidFetch == true)
{
    <h1 style="margin-top: 100px">Invalid Continue Request</h1>
    <div class="form-container">
        <button class="btn-primary" @onclick=NavigateToMenu>Menu</button>
    </div>
}
else if (_rendered == false)
{
    <h1 style="margin-top: 100px">Loading...</h1>
}
else
{
    <h3 style="margin-left: 100px">Time: @FormatTime()</h3>   // time since user started board
    @if (UserClient.MistakeDetection == "On")
    {
        <h3 style="margin-left: 100px">Mistakes: @_mistakeCount</h3>
    }
    <h3 style="margin-left: 100px">Hints: @_hintCount</h3>
    CheckBoard();
    @if (_userCompleted == true)
    {
        <h3>Board Completed!          Your Score: @GenerateScore(difficulty!)</h3>
    }
    <div class="sudoku-container-@_containerType">
        @for (int row = 0; row < _dimensions; row++)  // prints 81 square buttons in a 9x9 format
        {
            <div class="sudoku-column">
                @for (int column = 0; column < _dimensions; column++)
                {
                    // if row and column directly used, OnSelected(_dimensions, _dimensions) would be called for all cells
                    // for all cells as the loop would have finished by the time of user interaction, causing a logic error
                    int columnTemp = column;
                    int rowTemp = row;
                    string backgroundColour = "white";
                    @if (UserClient.MistakeDetection == "On")
                    {
                        // selects background colour of each cell based on correctness
                        backgroundColour = GetBackgroundColour(rowTemp, columnTemp);
                    }
                    <button class="sudoku-cell-@_cellType" style="background-color: @backgroundColour" @onclick="() => OnCellSelected(rowTemp, columnTemp)">@DisplayCell(rowTemp, columnTemp)</button>
                }
            </div>
        }
    </div>

    <div class="game-btn-container-left-@_containerType">
        <button class="btn-primary" @onclick=SolveBoard>Solve Board</button>
        <button class="btn-primary" @onclick=Reset>Reset Board</button>
        <button class="btn-primary" @onclick=SaveBoard>Save + Menu</button>
    </div>

    <div class="game-btn-container-right-@_containerType">
        <button class="btn-primary" @onclick=GetHint>Get Hint</button>
        <button class="btn-primary" @onclick=Undo>Undo</button>
        <button class="btn-primary" @onclick=ChangeNotesFunctionality>Notes: @_noteTaking</button>
    </div>

    <div class="number-buttons-container-@_containerType">
        @for (int i = 1; i <= _dimensions; i++)  // prints {_dimensions} numbered input buttons in a line
        {
            // if i was directly used, ChangeCellValue(_dimensions + 1) would be called
            // for all button clicks, causing a logic error
            int temp = i;
            <button class="button-cell-@_buttonType" @onclick="() => ChangeCellValue(temp)">@i</button>
        }
        <button class="button-cell-@_buttonType" style="font-size: 25px" @onclick="() => EraseValue()">Erase</button>
    </div>
}

@code {
    [Parameter]
    public string? difficulty {get; set;}
    private int _dimensions;
    private string? _containerType;
    private string? _cellType;
    private string? _buttonType;
    private bool _rendered = false;
    private bool _invalidFetch = false;
    private Cell? _selectedCell;
    private string[,]? _boardSketch;
    private Board? _board;
    private ForwardChecker? solver;
    private int[,]? _correctNumbers;
    private string? _path;
    private bool _solved;
    private bool _userCompleted = false;
    private DateTime _launchTime;
    private int _minuteDelay = 0;
    private int _secondDelay = 0;
    private int _mistakeCount;
    private int _hintCount;
    private string _noteTaking = "Off";
    private MoveStack _stack = new MoveStack(100);
    private DBCallerBoard _databaseCallerBoard = new();

    protected override async Task OnInitializedAsync()
    {
        _path = "SavedBoard.txt";
        if (difficulty != "16")
        {
            while (UserClient!.EasyFetched == 0 || UserClient!.MediumFetched == 0 || UserClient!.HardFetched == 0)
            {
                await Task.Delay(500);
            }
        }
        if (difficulty != "continue")
        {
            GetDifficulty();
        }
        // asynchronous method for board generation (API call or backtracking generation)
        await InitialiseBoardAndSolver();
        SetFrontendValues();
        _rendered = true;
        _launchTime = DateTime.Now.Add(new TimeSpan(0, _minuteDelay, _secondDelay));
        Task backgroundBoardsTask = GetBackgroundBoards();
        // re-renders the page every second while the board is not solved
        // this is required to update the timer to reflect real-time
        while (_solved == false)
        {                        
            await Task.Delay(1000);
            StateHasChanged();
        }
        // retrieves new boards in the background during gameplay
        await backgroundBoardsTask;
    }

    private async Task InitialiseBoardAndSolver()
    {
        // if a 9x9 board selected, use the API to generate a board
        if (_dimensions == 9)
        {
            bool boardFetched = false;
            while (boardFetched == false)
            {
                try
                {
                    GetBoard();
                    boardFetched = true;
                }
                catch (Exception)
                {
                    NavigateToMenu();
                }
            }
        }
        // if the user has opted to continue a previous board, load the save from the text file
        else if (difficulty == "continue")
        {
            _boardSketch = LoadSavedBoard();
        }
        // if the user has chosen another option, generate a new empty board sketch of the specified dimensions
        else
        {
            _boardSketch = new string[_dimensions, _dimensions];
            for (int i = 0; i < _dimensions; i++)
            {
                for (int j = 0; j < _dimensions; j++)
                {
                    _boardSketch[i, j] = "0v";
                }
            }
        }
        // occurs if the most recent board save is bound to a user other than the one currently logged in
        if (_boardSketch!.Length == 0)
        {
            _invalidFetch = true;
        }
        else
        {
            _board = new Board(difficulty, _boardSketch, _dimensions);
            // initialise the board ready for solving
            _board!.InitialiseGraph();
            solver = new ForwardChecker(_board);
            RecordVariableNodesWithValues();
            // alters the board by adding or removing numbers as required to form a board with a unique solution
            await MakeUniqueSolution(_board!);
            _correctNumbers = new int[_dimensions, _dimensions];
            InitialiseCorrectNumbers();
            RevertVariableNodesWithValues();
            _solved = false;
        }
    }

    private void SaveBoard()
    {
        if (!_solved)
        {
            string[,] boardContents = new string[_dimensions, _dimensions];
            int counter = 0;
            // save each cell on the board to the text file
            // this can be done using a loop as such as the adjacency list is created in order of cell position ((0,0), (0,1), ...)
            foreach (Cell cell in _board!.AdjacencyList.Keys)
            {
                // save the cell entry to the an array
                string saveData = "";
                saveData += cell.Entry.ToString();
                // if the cell is a variable node, append a 'v' character to the end of the record
                if (_board.VariableNodes.Contains(cell))
                {
                    saveData += "v";
                }
                boardContents[counter / _dimensions, counter % _dimensions] = saveData;
                counter++;
            }
            // clears all text from the file - fresh write
            File.WriteAllText(_path!, string.Empty);
            using (StreamWriter streamWriter = new StreamWriter(_path!))
            {
                // write each character from the array to the text file, in sequence
                for (int i = 0; i < _dimensions; i++)
                {
                    for (int j = 0; j < _dimensions; j++)
                    {
                        streamWriter.Write(boardContents[i, j] + " ");
                    }
                    // new line character denotes a new row of the board
                    streamWriter.Write("\n");
                }
                // append statistics and the user's ID to the text file
                streamWriter.WriteLine(difficulty);
                streamWriter.WriteLine(FormatTime());
                streamWriter.WriteLine(_mistakeCount);
                streamWriter.WriteLine(_hintCount);
                streamWriter.Write(UserClient.User!.Id);
            }
        }
        NavigateToMenu();
    }

    private string[,] LoadSavedBoard()
    {
        // catches exceptions in case of the file reader failing for any reason
        try
        {
            _path = "SavedBoard.txt";
            int counter = 0;
            List<string[]> cellList = new();
            using (StreamReader streamReader = new StreamReader(_path))
            {
                // reads every line of the file
                while (!streamReader.EndOfStream)
                {
                    // splits each line using the space character as a delimiter
                    // this separates each cell into a different entry in the array
                    string line = streamReader.ReadLine() ?? string.Empty;
                    string[] cells = line.Split(" ");
                    cellList.Add(cells);
                    counter++;
                }
            }
            // if a continued game has been completed previously, it should not be able to be continued anymore
            if (cellList[cellList.Count-1][0] == "Complete")
            {
                return new string[0, 0];
            }
            // {counter+5} lines are recorded in the file - the board details + 5 pieces of additional information such as difficulty, user ID etc
            string[,] boardSketch = new string[counter - 5, counter - 5];
            // reinstates the board sketch using the data from the file
            for (int i = 0; i < counter - 5; i++)
            {
                for (int j = 0; j < counter - 5; j++)
                {
                    boardSketch[i, j] = cellList[i][j];
                }
            }
            // reinstates other properties based on file data
            difficulty = cellList[counter - 5][0];
            _dimensions = counter - 5;
            string[] timeDelay = cellList[counter - 4][0].Split(':');
            // delay properties used to alter the launch time so the overall time elapsed across all saves can be displayed during gameplay
            _minuteDelay = -1 * Convert.ToInt32(timeDelay[0]);
            _secondDelay = -1 * Convert.ToInt32(timeDelay[1]);
            _mistakeCount = Convert.ToInt32(cellList[counter - 3][0]);
            _hintCount = Convert.ToInt32(cellList[counter - 2][0]);
            int id = Convert.ToInt32(cellList[counter - 1][0]);
            // checks if the ID of the user currently logged in matches the ID of the user who saved the board
            if (UserClient.User!.Id == id)
            {
                return boardSketch;
            }
            // returns nothing if the ID's do not match
            return new string[0, 0];
        }
        catch (Exception)
        {
            return new string[0, 0];
        }
    }

    private void RecordVariableNodesWithValues()
    {
        // stores values of non-zero variable nodes in case of a continued/stored game
        foreach (Cell cell in _board!.VariableNodes)
        {
            if (cell.Entry != 0)
            {
                _stack!.Push(new Move(cell, cell.Entry));
                cell.ChangeCellValue(0);
            }
        }
        // all variable nodes can be set to 0 for the solving process, ensuring it is unaffected by any previous user input
    }

    private void RevertVariableNodesWithValues()
    {
        // resets the values of variable nodes to those input by the user in case of a continued game
        while (_stack.Count > 0)
        {
            Move move = _stack.Pop();
            move.Cell.ChangeCellValue(move.OldEntry);
        }
    }

    private void GetBoard()
    {
        BoardGeneratorAPI generator = new BoardGeneratorAPI();  
        foreach (Board savedBoard in UserClient!.FetchedBoards!)
        {
            // checks if difficulty of a cached board matches the desired difficulty
            if (savedBoard.Difficulty == difficulty)
            {
                // sets the board to the cached board, removing it from the cache and eliminating the need for another API call
                _board = savedBoard;
                _boardSketch = savedBoard.BoardSketch;
                UserClient!.FetchedBoards.Remove(savedBoard);
                break;
            }
        }
    }

    private void GetDifficulty()
    {
        // indicates a larger board - no individual difficulty settings for these
        if (difficulty == "16" || difficulty == "25")
        {
            _dimensions = Convert.ToInt32(difficulty);
        }
        // indicates a 9x9 board with difficulty settings
        else
        {
            _dimensions = 9;
            // gets recommended difficulty from database using the user's stats if required, otherwise use the chosen difficulty
            if (difficulty == "Adaptive")
            {
                difficulty = _databaseCallerBoard.GetRecommendedDifficulty(UserClient.User!.Id);
            }
        }
    }

    private async Task MakeUniqueSolution(Board board)
    {
        IBoardGenerator generator = GetGeneratorType(_dimensions);
        // asynchronously alters the board so it has a unique solution
        await Task.Run(() => generator.GenerateUniqueSolution(_dimensions, board));
    }

    private IBoardGenerator GetGeneratorType(int dimensions)
    {
        // dynamically selects the generator type at runtime based on how the board was created (API or not)
        if (dimensions == 9)
        {
            return new BoardGeneratorAPI();
        }
        return new UniqueBoardGenerator();
    }


    private void SolveBoard()
    {
        // if the board has not already been solved, allow new changes
        if (!_solved)
        {
            foreach (Cell cell in _board!.VariableNodes)
            {
                // sets the value of all cells to the correct value, ensuring they are rendered correctly
                cell.ChangeCellValue(_correctNumbers![cell.Position.Item1, cell.Position.Item2]);
            }
        }
        _solved = true;
    }


    private void InitialiseCorrectNumbers()
    {
        // array used to store numbers for rapid access later on
        for (int i = 0; i < _dimensions; i++)
        {
            for (int j = 0; j < _dimensions; j++)
            {
                // sets correct numbers based on those in the solution
                _correctNumbers![i, j] = Convert.ToInt32(_board!.Solutions[0].BoardSketch[i, j]);
            }
        }
        // resets the board so that it is rendered in its initial state for the user
        _board!.Reset();
    }

    private void SetFrontendValues()
    {
        // selects how the board cells and numbers should be displayed to fit all elements on the page
        // based on the board size/dimensions
        if (_dimensions == 9)
        {
            _containerType = "default";
            _cellType = "default";
            _buttonType = "default";
        }
        else
        {
            _containerType = "large";
            _buttonType = "large";
            if (_dimensions == 16)
            {
                _cellType = "medium";
            }
            else
            {
                _cellType = "large";
            }
        }
    }

    private void OnCellSelected(int row, int column)
    {
        if (!_solved)
        {
            bool found = false;
            foreach (Cell cell in _board!.VariableNodes)
            {
                // finds the cell selected by the user, based on position
                if (cell.Position.Item1 == row && cell.Position.Item2 == column)
                {
                    // sets the _selectedCell property to indicate the cell that should be altered when a number button is pressed
                    _selectedCell = cell;
                    found = true;
                }
            }
            // if user selects a fixed node which cannot be altered
            if (found == false)
            {
                _selectedCell = null;
            }
        }
    }

    private string DisplayCell(int row, int column)
    {
        foreach (Cell cell in _board!.AdjacencyList.Keys)
        {
            if (cell.Position.Item1 == row && cell.Position.Item2 == column)
            {
                // if the cell contains user added note entries
                if (cell.NoteEntries.Count != 0)
                {
                    // displays cell value if it is non-empty + note entries
                    if (cell.Entry != 0)
                    {
                        return $"{cell.Entry.ToString()}  ({string.Join(",", cell.NoteEntries)})";
                    }
                    return $" ({string.Join(",", cell.NoteEntries)})";
                }
                // if the cell contains no note entries
                else
                {
                    // displays the cell value if it is non-empty, otherwise displays nothing
                    if (cell.Entry != 0)
                    {
                        return cell.Entry.ToString();
                    }
                    return $" ";
                }
            }
        }
        // exception to catch logic errors during testing
        throw new InvalidOperationException("Cell does not exist");
    }

    private void ChangeCellValue(int number)
    {
        if (!_solved)
        {
            // if note taking mode is off - entries directly impact the board
            if (_noteTaking == "Off")
            {
                if (!(_selectedCell == null))
                {
                    // records the change + pushes it onto move stack, providing the option to undo later if necessary
                    Move move = new Move(_selectedCell, _selectedCell!.Entry);
                    _stack.Push(move);
                    _selectedCell.ChangeCellValue(number);
                    // if the input number is incorrect - does not match the value in the solution
                    if (number != _correctNumbers![_selectedCell.Position.Item1, _selectedCell.Position.Item2])
                    {
                        // increment the mistake count
                        _mistakeCount++;
                    }
                }
            }
            // if note taking mode is on - entries do not impact the board
            else
            {
                // if the number is already noted, remove it from the list
                if (_selectedCell!.NoteEntries.Contains(number))
                {
                    _selectedCell.NoteEntries.Remove(number);
                }
                else
                {
                    // if the number is not already noted, add it to the list
                    _selectedCell.NoteEntries.Add(number);
                }
            }
        }
    }

    private string GetBackgroundColour(int row, int column)
    {
        string cellValue = DisplayCell(row, column);
        // splits the entry into separate parts - the cell value + any notes
        string[] entriesSplit = cellValue.Split(' ');
        // if cell is non-empty and is filled with an incorrect value
        if (cellValue[0].ToString() != " " && entriesSplit[0] != _correctNumbers![row, column].ToString())
        {
            return "red";
        }
        return "white";
    }

    private void CheckBoard()
    {
        // if board is complete + has not been solved in previous renders
        if (solver!.CheckInvalidFull() == false && solver!.CheckFinished() == true && _solved == false)
        {
            // _userCompleted implies that the user has completed the board without using the solve functionality
            _userCompleted = true;
            _solved = true;
            // if the user's settings indicate that the score should be saved to the database
            if (UserClient.SaveScores == "On")
            {
                // if this is the first board to be completed in the session
                if (UserClient.SessionId == 0)
                {
                    // add a new session to the database
                    DBCallerUser databaseCallerUser = new();
                    databaseCallerUser.AddSession(UserClient.User!.Id);
                    // bind the session id to the UserClient service
                    UserClient.SetSessionId(databaseCallerUser.GetTableCount("sessions"));
                }
                // creates a new record for the board entry using the existing session id + adds it to the database
                UserClient.AddEntry(GenerateScore(difficulty!), difficulty!, _mistakeCount, _hintCount, FormatTime());
                _databaseCallerBoard.AddEntry(UserClient.Entry!);
            }
            using (StreamWriter streamWriter = new StreamWriter(_path!))
            {
                streamWriter.WriteLine("Complete");
            }
        }
    }

    private int GenerateScore(string difficulty)
    {
        TimeSpan completionTime = DateTime.Now - _launchTime;
        int timeScoreSubtraction = (completionTime.Minutes * 60 + completionTime.Seconds);  // 1 score subtracted per second
        int mistakeScoreSubtraction = _mistakeCount * 100;  // 100 score subtracted per mistake
        int hintScoreSubtraction = _hintCount * 150;  // 150 score subtracted per hint
        int difficultyBonus = 0;
        if (difficulty == "Medium")
        {
            difficultyBonus = 500;
        }
        else if (difficulty == "Hard")
        {
            difficultyBonus = 1000;
        }
        // score calculation performed based on various factors, subtracting from an initial maximum score of 5000
        int score = 5000 - timeScoreSubtraction - mistakeScoreSubtraction - hintScoreSubtraction + difficultyBonus;
        // negative scores brought up to 0
        if (score < 0)
        {
            return 0;
        }
        return score;
    }

    private string FormatTime()
    {
        // calculates the time spent on the board
        TimeSpan currentTime = DateTime.Now - _launchTime;
        // splits the time into minutes and seconds
        if (currentTime.Seconds < 10)
        {
            // e.g. time formats as 7:06 instead of 7:6
            return $"{currentTime.Minutes}:0{currentTime.Seconds}";
        }
        return $"{currentTime.Minutes}:{currentTime.Seconds}";
    }

    private void EraseValue()
    {
        // removes the value of a variable cell, providing that the board has not been solved already
        if (!_solved && _selectedCell != null)
        {
            _selectedCell!.ChangeCellValue(0); 
        }
    }

    private void Reset()
    {
        if (!_solved)
        {
            _board!.Reset();
        }
    }

    private void GetHint()
    {
        if (!_solved)
        {
            List<Cell> emptyCells = new();
            // adds all cells that currently have no value to a list
            foreach (Cell cell in _board!.VariableNodes)
            {
                if (cell.Entry == 0)
                {
                    emptyCells.Add(cell);
                }
            }
            Random random = new Random();
            // selects a random empty cell from the list
            int randomIndex = random.Next(emptyCells.Count);
            Cell selectedCell = emptyCells[randomIndex];
            // fills the random cell with the correct value + increment hint count
            selectedCell.ChangeCellValue(_correctNumbers![selectedCell.Position.Item1, selectedCell.Position.Item2]);
            _hintCount++;
        }
    }

    private void ChangeNotesFunctionality()
    {
        // changes frontend display + functionality when changing cell values
        if (_noteTaking == "On")
        {
            _noteTaking = "Off";
        }
        else
        {
            _noteTaking = "On";
        }
    }

    private void Undo()
    {
        if (_stack.Count > 0)
        {
            // sets the given cell to its original entry before being changed
            Move move = _stack.Pop();
            move.Cell.ChangeCellValue(move.OldEntry);
        }
    }

    private void NavigateToMenu()
    {
        NavigationManager.NavigateTo("/menu");
    }

    private async Task GetBackgroundBoards()
    {
        bool fetched = false;

            // catches exceptions in case of the API call failing for any reason
        while (fetched == false)
        {
            try
            {
                // generates new boards asynchronously in the background while user is playing
                BoardGeneratorAPI generator = new();
                // boards are continuously fetched until at least one board of each difficulty is stored
                while (UserClient.EasyFetched == 0 || UserClient.MediumFetched == 0 || UserClient.HardFetched == 0)
                {
                    // 10 boards fetched to minimise the number of fetches needed, while also preventing individual fetches from taking too long
                    List<Board> fetchedBoards = await generator.GenerateBoard();
                    for (int i = 0; i < 10; i++)
                    {
                        UserClient.IncrementDifficultiesFetched(fetchedBoards[i].Difficulty);
                        UserClient!.FetchedBoards!.Add(fetchedBoards[i]);
                    }
                }
                fetched = true;
            }
            catch (Exception)
            {
                fetched = false;
            }
        }
    }
}