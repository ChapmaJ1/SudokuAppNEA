    @page "/custom/{dimensionString}"
@inject NavigationManager NavigationManager

<h1 style="transform: translate(-50px, 0px)">Custom Board</h1>

@if (_sketch == null)
{
    <h1 style="margin-top: 100px;">Loading...</h1>
}
else
{
    <div class="sudoku-container-custom-@_containerType">
        @for (int row = 0; row < _dimensions; row++)
        {
            <div class="sudoku-column-large">
                @for (int column = 0; column < _dimensions; column++)
                {
                    // if row, column directly used, OnSelected(_dimensions, _dimensions) would be called for all cells
                    // as the loop would have finished by the time of user interaction, causing a logic error
                    int columnTemp = column;
                    int rowTemp = row;
                    <button class="sudoku-cell-@_cellType" @onclick="() => OnCellSelected(rowTemp, columnTemp)">@DisplayCell(rowTemp, columnTemp)</button>
                }
            </div>
        }
    </div>

    <div class="custom-btn-container">
        <button class="btn-primary" @onclick=SolveBoard>Solve Board</button>
        <button class="btn-primary" @onclick=NavigateToDifficulty>New Game</button>
        <button class="btn-primary" @onclick=Reset>Reset Board</button>
        <button class="btn-primary" @onclick=NavigateToMenu>Menu</button>
    </div>

    <div class="number-buttons-custom-container-@_containerType">
        @for (int i = 1; i <= _dimensions; i++)
        {
            // if i directly used, ChangeCellValue(10) would be called for all button clicks, causing a logic error
            int temp = i;
            <button class="button-cell-@_cellType" @onclick="() => ChangeCellValue(temp)">@i</button>
        }
        <button class="button-cell-@_cellType" @onclick="() => EraseValue()">Erase</button>
    </div>

    <div class="center-text-container-@_containerType">
        @if (_solvable == false)
        {
            @if (_dimensions == 25)
            {
                <h3 style="margin-top: -2em">Unsolvable Board Input</h3>
            }
            else
            {
                <h3>Unsolvable Board Input</h3>
            }
        }
    </div>
}

@code {
    [Parameter]
    public string? dimensionString { get; set;}
    private int _dimensions;
    private string? _containerType;
    private string? _cellType;
    private string[,]? _sketch;  // uses array instead of board to create initial board sketch (from user input) to be solved
    private Board? _board;
    private (int, int) _selectedSquare;
    private bool _solvable = true;

    protected override void OnInitialized()
    {
        _dimensions = Convert.ToInt32(dimensionString);
        // selects how the board cells and numbers should be displayed to fit all elements on the page
        // based on the board size/dimensions
        if (_dimensions == 25)
        {
            _containerType = "large";
            _cellType = "large";
        }
        else if (_dimensions == 16)
        {
            _containerType = "large";
            _cellType = "medium";
        }
        else
        {
            _containerType = "default";
            _cellType = "default";
        }
        _sketch = new string[_dimensions, _dimensions];
        for (int i=0; i<_dimensions; i++)
        {
            for (int j=0; j<_dimensions; j++)
            {
                // initialises board sketch to an empty _board
                _sketch[i, j] = "0v";
            }
        }
    }

    private void SolveBoard()
    {
        _solvable = true;
        _board = new Board("", _sketch, _dimensions);
        // initialises the board's graph and priority queue, using the altered sketch, and solves
        _board.InitialiseGraph();
        _board!.InitialiseQueue();
        BacktrackingSolver solver;
        // dynamically selects the type of solver to use based on board size
        if (_dimensions == 25)
        {
            solver = new Annealer(_board);
        }
        else
        {
            solver = new ForwardChecker(_board);
        }
        // checks if the board input by the user violates a constraint, and is hence unsolvable
        var fixedNodes = _board.AdjacencyList.Keys.Except(_board.VariableNodes);
        foreach (Cell cell in fixedNodes)
        {
            if (solver.CheckInvalid(cell))
            {
                _solvable = false;
                break;
            }
        }
        if (_solvable == true)
        {
            solver.Solve();
        }
    }

    private string DisplayCell(int row, int column)
    {
        // if cell is not empty, return + display its numerical value
        if (_sketch![row, column] != "0v")
        {
            return _sketch[row, column];
        }
        // otherwise return an empty string
        return "";
        throw new InvalidOperationException("Cell does not exist");
    }

    private void OnCellSelected(int row, int column)
    {
        // selects the location of the cell to be edited
        _selectedSquare = ((row, column));
    }

    private void ChangeCellValue(int number)
    {
        // sets the value of a given board location to the desired number, and sets the cell to fixed for solving
        _sketch![_selectedSquare.Item1, _selectedSquare.Item2] = number.ToString();
    }

    private void Reset()
    {
        // resets all cells to empty and variable
        for (int i = 0; i < _dimensions; i++)
        {
            for (int j = 0; j < _dimensions; j++)
            {
                _sketch![i, j] = "0v";
                // sketch not directly bound to board object - this means the board can be reset
                // and a completely new one can be input + solved as required
            }                     
        }
    }
    private void EraseValue()
    {
        // removes the value of a cell and reinstates it as a variable node
        _sketch![_selectedSquare.Item1, _selectedSquare.Item2] = "0v";
    }

    private void NavigateToDifficulty()
    {
        NavigationManager.NavigateTo("/difficulty");
    }

    private void NavigateToMenu()
    {
        NavigationManager.NavigateTo("/menu");
    }
}
